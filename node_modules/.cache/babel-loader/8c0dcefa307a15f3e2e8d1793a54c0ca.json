{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\covid tracker\\\\covid19\\\\covidtracker\\\\src\\\\LineGraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from 'react-chartjs-2';\nimport numeral from \"numeral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      }\n    }\n  },\n  scales: {\n    xAxes: [{\n      type: \"time\",\n      time: {\n        format: \"MM/DD/YY\",\n        tooltipFormat: \"ll\"\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        display: false\n      },\n      ticks: {\n        // Include a dollar sign in the ticks\n        callback: function (value, index, values) {\n          return numeral(value).format(\"0a\");\n        }\n      }\n    }]\n  }\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint\n      };\n      chartData.push(newDataPoint);\n    }\n\n    lastDataPoint = data[casesType][date];\n  }\n\n  return chartData;\n};\n\nfunction LineGraph(_ref) {\n  _s();\n\n  let {\n    casesType\n  } = _ref;\n  const [data, setData] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\").then(response => {\n        return response.json();\n      }).then(data => {\n        let chartData = buildChartData(data, casesType);\n        setData(chartData); // buildChart(chartData);\n      });\n    };\n\n    fetchData();\n  }, [casesType]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: (data === null || data === void 0 ? void 0 : data.length) > 0 && /*#__PURE__*/_jsxDEV(Line, {\n      data: {\n        datasets: [{\n          backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n          borderColor: \"#CC1034\",\n          data: data\n        }]\n      },\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LineGraph, \"tNVKLF/eI269iIOS4WygXQde5D8=\");\n\n_c = LineGraph;\nexport default LineGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"names":["React","useState","useEffect","Line","numeral","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","chartData","lastDataPoint","date","cases","newDataPoint","x","y","push","LineGraph","setData","fetchData","fetch","then","response","json","length","datasets","backgroundColor","borderColor"],"sources":["C:/Users/HP/Desktop/covid tracker/covid19/covidtracker/src/LineGraph.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({casesType}) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        \r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;"],"mappings":"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"},"metadata":{},"sourceType":"module"}