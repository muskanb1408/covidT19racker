"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = ForDevice;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _MediaQueryCtx = _interopRequireDefault(require("./MediaQueryCtx"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ForDevice(_ref) {
  var children = _ref.children,
      deviceName = _ref.deviceName;

  var GetDeviceScreen = function GetDeviceScreen(_ref2) {
    var screenSize = _ref2.screenSize;
    var width = window.screen.width;
    var _screenSize$deviceNam = screenSize[deviceName],
        minWidth = _screenSize$deviceNam.minWidth,
        maxWidth = _screenSize$deviceNam.maxWidth;

    if (width >= minWidth && width <= maxWidth) {
      return children;
    }

    return null;
  };

  var GetMultipleDeviceScreen = function GetMultipleDeviceScreen(_ref3) {
    var screenSize = _ref3.screenSize;
    var width = window.screen.width;

    var hasScreen = function hasScreen(element) {
      var _screenSize$element = screenSize[element],
          minWidth = _screenSize$element.minWidth,
          maxWidth = _screenSize$element.maxWidth;
      return width >= minWidth && width <= maxWidth;
    };

    if (deviceName.some(hasScreen)) {
      return children;
    }

    return null;
  };

  return /*#__PURE__*/_react["default"].createElement(_MediaQueryCtx["default"].Consumer, null, function (value) {
    if (_typeof(deviceName) === 'object') {
      return /*#__PURE__*/_react["default"].createElement(GetMultipleDeviceScreen, {
        screenSize: value
      });
    }

    return /*#__PURE__*/_react["default"].createElement(GetDeviceScreen, {
      screenSize: value
    });
  });
}

ForDevice.propTypes = {
  children: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].string]).isRequired,
  deviceName: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].array]).isRequired
};